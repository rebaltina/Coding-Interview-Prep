#ex1 on training

i=0
j=0
sum=0

output =[]

while (i<len(a)):
	sum = 0
	while (j<len(a)):
		if j!=i:
			sum=(sum+a[j])
		j=j+1
		print ("This is j" + str(j) + "in the inner loop")
	output.append(sum)
	j=0
	print ("This is j" + str(j) + "in the outer loop")
	i=i+1
	print ("This is i" + str(i) + "in the outer loop")

#implement a LinkedList
class Node:
	def __init__(self, value):
		self.value=value
		self.next=None
class LinkedList:
	def __init__(self):
		self.head=None
	def append (self, node):
		if self.head is None:
			self.head=Node(value)
			return
		else:
			current=self.head
			while current.next != None:
				self.current=self.current.next
			self.current.next=Node(value)
	def get_prev_value(self,ref_node):
		current=self.head
		whiel (current and current.next!=ref_node)
		return prev_node

#How would you implement an anagram checker?

#ex2 on trianing
a=[2,3,7,4,2,3]

i=0
j=0
output = 0
while (i<len(a)):
	n=a[i]
	flag = True
	while (j<len(a) and flag):
		if j!=i:
			m=a[j]
			if n==m:
				flag = False
		j=j+1
	j=0
	if flag == True:
		output = n
	i=i+1

#ex3 on training
i=0
j=0
output = []
while (i<len(a)):
	n=a[i]
	flag = True
	while (j<len(a) and flag):
		if j!=i:
			m=a[j]
			if n==m:
				flag = False
		j=j+1
	j=0
	if flag == True:
		output.append(n)
	i=i+1


#count how many time a word appears in a text
i=0
j=0

text = "pato gato mosca elefante leon gato perro lagarto perro mosca mujer mujer gato"


words = text.split()
dict= {}

while (i<len(words)):
	key=words[i]
	key3=()
	while (j<len(words)):
			if (j!=i):
				key2=words[j]
				if key!=key2:
					key3=key
			j=j+1
	value=str(words.count(key3))
	dict.update({key3:value})
	j=0
	i=i+1



#Return the number (count) of vowels in the given string.
def getCount(inputStr):^M
        num_vowels = 0^M
        for i in (inputStr):^M
                if i in 'aeiou':
                    num_vowels = num_vowels + 1  ^M
        return num_vowels

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.



sum=0

output =[]
for i in range(1000):
	if i%3==0 or i%5==0:
		output.append(i)
		sum = sum + i
print sum

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

	return
return Fibonacci

prev, cur = 0, 1
sum = 0
while True and cur in range (4000000):
    prev, cur = cur, prev + cur
    if cur % 2 == 0:
        sum = cur+1
print(sum)

def F(n):
	if n=0:
		return 1
	ielif n=1:
		return 1
	else:
		F=F(n-1)+F(n-2)
	end

#Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.

#It should remove all values from list a, which are present in list b.

#array_diff([1,2],[1]) == [2]
#If a value is present in b, all of its occurrences must be removed from the other:

#array_diff([1,2,2,2,3],[2]) == [1,3]
def array_diff(a, b):
    new_list = []
    for i in a:
        if i not in b:
            new_list += [i]
    return new_list

#or

def array_diff(a, b):
    return [x for x in a if x not in b]

def fibonacci(n):
	if n==1:
		return 1
	if n==2:
		return 2
	return fibonacci(n-1)+fibonacci(n-2)

d={1:1,2:2}
def fib_efficient(n,d):
	if n in d:
		return d[n]
	else:
		ans = fib_efficient((n-1),d)+fib_efficient((n-2),d)
		d[n]=ans
		return ans
